plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
    id 'com.modrinth.minotaur' version '2.+' apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        archivesName = project.archives_base_name
    }

    loom {
        silentMojangMappingsLicense()
    }

    repositories {
        maven { url = "https://maven.terraformersmc.com/" }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }

        maven { url 'https://maven.quiltmc.org/repository/release/' }
        maven {
            name = "Figura Maven Release"
            url = uri("https://maven.figuramc.org/releases")
        }
        maven {
            name = "Figura Maven Snapshots"
            url = uri("https://maven.figuramc.org/snapshots")
        }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.layered {
            officialMojangMappings()
            if (project.parchment_version) {
                parchment("org.parchmentmc.data:parchment-$rootProject.minecraft_version:${project.parchment_version}@zip")
            }
        }
    }

    java {
        withSourcesJar()
        targetCompatibility = sourceCompatibility = project.java_version as Integer
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = project.java_version as Integer
    }

    processResources {
        // expand every property from gradle.properties
        def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
        stringProperties.each { inputs.property(it.key, it.value) }

        def files = ["${project.mod_id}.mixins.json", "fabric.mod.json", "META-INF/mods.toml"]
        files += enabled_platforms.split(',').collect {"${project.mod_id}.${it}.mixins.json" }

        files.each {
            filesMatching(it) {
                expand(stringProperties) {
                    escapeBackslash = true
                }
            }
        }
    }

    def loader = project.name
    if (!enabled_platforms.split(',').contains(loader))
        return

    version = project.mod_version + "-" + loader +  "-" + project.minecraft_version

    def toList = (String s) -> s.split(',').collect{ it.trim() }

    def changelogMd = rootProject.file('changelog.md').getText("UTF-8")
    def projectGameVersions = toList(property("${loader}_game_versions".toString()) as String)
    def lastGameVersion = projectGameVersions.last()
    def capitalizedLoader = loader == 'neoforge' ? 'NeoForge' : loader.capitalize()

    apply plugin: "com.modrinth.minotaur"

    modrinth {
        def MODRINTH_TOKEN = System.getenv("MODRINTH_TOKEN")
        if (MODRINTH_TOKEN != null) {
            token = MODRINTH_TOKEN
            projectId = project.modrinth_id
            versionName = project.mod_version
            versionNumber = project.mod_version
            versionType = "release"
            uploadFile = remapJar
            changelog = changelogMd
            gameVersions = projectGameVersions
            loaders = [loader]
            dependencies {
                toList(project.optional_modrinth_dependencies).each{ optional.project(it) }
            }
        }
    }

    apply plugin: "com.matthewprenger.cursegradle"

    curseforge {
        def CURSEFORGE_TOKEN = System.getenv("CURSEFORGE_TOKEN")
        if (CURSEFORGE_TOKEN != null) {
            apiKey = CURSEFORGE_TOKEN
            project {
                id = project.curseforge_id
                releaseType = "release"
                changelogType = "markdown"
                changelog = changelogMd

                addGameVersion capitalizedLoader
                projectGameVersions.each{ addGameVersion(it) }

                relations {
                    toList(project.optional_curseforge_dependencies).each{ optionalDependency(it) }
                }
                mainArtifact(remapJar.archiveFile.get().asFile) {
                    displayName = "[${capitalizedLoader} ${lastGameVersion}] ${project.mod_version}"
                }
                afterEvaluate {
                    uploadTask.dependsOn("build")
                }
            }
            options {
                forgeGradleIntegration = false
                javaVersionAutoDetect = false
            }
        }
    }
}
